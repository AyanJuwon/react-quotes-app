{"version":3,"sources":["components/Spinner.js","App.js","reportWebVitals.js","index.js"],"names":["Spinner","console","log","className","React","Component","App","props","state","quote","author","loading","changeQuote","bind","loadQuote","loadSpinner","this","stateloading","setState","fetch","then","response","json","data","message","catch","err","error","id","onClick","href","target","render","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"2QAkBeA,G,6KAVf,OADIC,QAAQC,IAAI,kBAGZ,sBAAKC,UAAU,UAAf,UACF,qBAAKA,UAAU,YACf,qBAAKA,UAAU,YACf,qBAAKA,UAAU,mB,GAXKC,IAAMC,YC6EbC,G,wDA1Eb,WAAYC,GAAO,IAAD,8BAChB,cAAMA,IACDC,MAAQ,CAACC,MAAM,mBACtBC,OAAO,aACTC,SAAQ,GACJ,EAAKC,YAAc,EAAKA,YAAYC,KAAjB,gBACnB,EAAKC,UAAY,EAAKA,UAAUD,KAAf,gBACjB,EAAKE,YAAc,EAAKA,YAAYF,KAAjB,gBAPH,E,0DASJ,IAAD,OACXZ,QAAQC,IAAIc,KAAKC,cACjBD,KAAKE,SAAS,CACZP,SAAQ,IAEVV,QAAQC,IAAIc,KAAKR,MAAMG,SACvBQ,MAAM,mDAAoD,CACxD,OAAU,MACV,QAAW,CACT,iBAAkB,qDAClB,kBAAmB,wCAGpBC,MAAK,SAAAC,GACJ,OAAOA,EAASC,UAEjBF,MAAK,SAACG,GACL,IAAId,EAAO,CACTA,MAAMc,EAAKC,QACXd,OAAOa,EAAKb,QAEd,EAAKQ,SAAS,CACZT,MAAOc,EAAKC,QACZd,OAAQa,EAAKb,OACbC,SAAQ,IAEVV,QAAQC,IAAIO,MAGbgB,OAAM,SAAAC,GACLzB,QAAQ0B,MAAMD,Q,oCAMlB,OACE,sBAAKE,GAAG,YAAR,UACC,oCAAM,cAAC,EAAD,OACP,qCAAO,cAAC,EAAD,OACL,wBAAQC,QAASb,KAAKJ,YAAtB,6B,kCAMJ,OACE,sBAAKgB,GAAG,YAAR,UACN,oBAAGA,GAAG,OAAN,UAAa,qCAAeZ,KAAKR,MAAMC,SACvC,oBAAGmB,GAAG,SAAN,sBAAyBZ,KAAKR,MAAME,UACpC,wBAAQkB,GAAG,YAAYC,QAASb,KAAKJ,YAArC,sBACA,uBACA,mBAAGgB,GAAG,cAAcE,KAAK,2BAA2BC,OAAO,SAA3D,8B,+BAQI,IAAMC,EAAUhB,KAAKR,MAAMG,QAAWK,KAAKD,cAAcC,KAAKF,YAC7D,OAAOkB,M,GAvEM5B,IAAMC,YCQT4B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBf,MAAK,YAAkD,IAA/CgB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAAST,OACP,cAAC,IAAMU,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BX,M","file":"static/js/main.dd0dbfe9.chunk.js","sourcesContent":["import React from 'react'\r\nimport \"./spinner.css\" \r\nclass Spinner extends React.Component{\r\n\r\nrender(){\r\n\r\n\r\n    console.log('spinner mounts')\r\nreturn(\r\n    \r\n    <div className=\"spinner\">\r\n  <div className=\"bounce1\"></div>\r\n  <div className=\"bounce2\"></div>\r\n  <div className=\"bounce3\"></div>\r\n</div>\r\n)}\r\n\r\n} \r\nexport default Spinner","import React from 'react'\nimport Spinner from './components/Spinner'\nimport './App.css';\n\nclass App extends React.Component{\n  constructor(props){\n    super(props);\n    this.state = {quote:'Quote Loads Here',\n  author:'Oluwajuwon',\nloading:false}\n    this.changeQuote = this.changeQuote.bind(this)\n    this.loadQuote = this.loadQuote.bind(this)\n    this.loadSpinner = this.loadSpinner.bind(this)\n  }\n  changeQuote(){\n    console.log(this.stateloading)\n    this.setState({\n      loading:true\n    })\n    console.log(this.state.loading)\n    fetch(\"https://qvoca-bestquotes-v1.p.rapidapi.com/quote\", {\n      \"method\": \"GET\",\n      \"headers\": {\n        \"x-rapidapi-key\": \"23a1830e2amshb300f3a2bac9a56p1793d1jsn2b8cb9b48d12\",\n        \"x-rapidapi-host\": \"qvoca-bestquotes-v1.p.rapidapi.com\"\n      }\n    })\n      .then(response => {\n        return response.json();\n      })\n      .then((data) => {\n        let quote ={\n          quote:data.message,\n          author:data.author\n        }\n        this.setState({\n          quote: data.message,\n          author: data.author,\n          loading:false\n        })\n        console.log(quote)\n      })\n      // console.log(quote)\n      .catch(err => {\n        console.error(err);\n      });\n    \n  }\n\n  loadSpinner(){\n    return (\n      <div id=\"quote-box\">\n       <div> <Spinner /></div>\n      <div>  <Spinner /></div>\n        <button onClick={this.changeQuote}>Loading...</button>\n      </div>\n    );\n  }\n\n  loadQuote(){\n    return(\n      <div id=\"quote-box\">\n<p id=\"text\"><span>\"</span>{this.state.quote}</p> \n<p id=\"author\">Author:- {this.state.author}</p> \n<button id=\"new-quote\" onClick={this.changeQuote}>Generate</button>\n<br />\n<a id=\"tweet-quote\" href=\"twitter.com/intent/tweet\" target=\"_blank\" >Tweet Quote</a>\n</div>\n    )\n\n  }\n  render(){\n\n    \n    const render = (this.state.loading) ? this.loadSpinner():this.loadQuote()\n     return render\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}